snippet     ln
abbr        println!(...)
options     word, indent
    println!(${0})
snippet     #debug
alias       #d
abbr        #[derive(Debug)]
options     word, indent
    #[derive(Debug)]${0}
snippet     use_hashmap
abbr        use std::collections::HashMap;
options     word, indent
    use std::collections::HashMap;${0}
snippet     init_hashmap
abbr        .zip(...).collect()
options     word, indent
    let init_keys = vec![${0}];
    let init_values = vec![];
    let ${1}: HashMap<_, _> = init_keys.iter().zip(init_values).collect();
snippet     use_file
abbr        use std::fs::File;
options     word, indent
    use std::io;
    use std::fs::File;
    use std::io::prelude::*;
    use std::io::Read;
    use std::io::ErrorKind;${0}
snippet     use_regex
abbr        use regex::Regex;
options     word, indent
    use regex::Regex;${0}
snippet     regex_new
abbr        Regex::new().unwrap()
options     word, indent
    let ${1} = Regex::new(r"${2}").unwrap();${0}
snippet     use_display
abbr        use std::fmt::Display;
options     word, indent
    use std::fmt::Display;${0}
snippet     use_cmp
abbr        use std::cmp::PartialOrd;
options     word, indent
    use std::cmp::PartialOrd;${0}
snippet     test_fn
alias       #t
abbr        #[test] fn ..() {}
options     word, indent
    #[test]
    fn ${0}() {}
snippet     #panic
alias       #p
abbr        #[should_panic(expected = "...")]
options     word, indent
    #[should_panic(expected = "${0}")]
snippet     #ignore
alias       #i
abbr        #[ignore]
options     word, indent
    #[ignore]${0}
snippet     test_mod
abbr        #[cfg(test)] mod test { use super::*; .... }
options     word, indent
    #[cfg(test)]
    mod test {
        use super::*;
        ${0}
    }
snippet     sfrom
alias       sf
abbr        String::from("...")
options     word, indent
    String::from("${0}")
snippet     use_rand
abbr        use rand::Rng;
options     word, indent
    use rand::Rng;${0}
snippet     drop
abbr        std::mem::drop(...);
options     word, indent
    std::mem::drop(${0});
snippet     th_spawn
alias       th
abbr        thread::spawn(|| { ... });
options     word, indent
    thread::spawn(|| {${0}});
snippet     use_ref
abbr        use ....
options     word, indent
    use std::rc::Rc;
    use std::cell::RefCell;${0}
snippet     clap_opt
abbr        #[arg(name="", short='', long="", help="")]
options     word, indent
    #[arg(name="${1}", short='${2}', long="${3}", help="${0}")]
snippet     clap_arg
abbr        #[arg(value_name="...", index=..., help="...")]
options     word, indent
    #[arg(value_name="${1}", index=${2}, help="${0}")]
snippet     clap_group
abbr        #[command(group(ArgGroup::new("...").required(true).args(["...", "...", ...])))]
options     word, indent
    #[command(group(ArgGroup::new("${1}").required(true).args(["${0}", ])))]
snippet     #clap
abbr        #[derive(Debug, Parser)] struct ... {}
options     word, indent
    #[derive(Debug, Parser)]
    pub struct ${1} {
        ${0}
    }
snippet     #clap_sub
abbr        #[derive(Debug, Subcommand)] pub enum ... {}
options     word, indent
    #[derive(Debug, Subcommand)] 
    pub enum ${1} {
        
    }
snippet     #com
alias       #clap_com
abbr        #[command(about="...")]
options     word, indent
    #[command(about="${1}")]${0}
snippet     #clap_args
abbr        #[derive(Debug, Args)] pub struct ... {}
options     word, indent
    #[derive(Debug, Args)]
    pub struct ${1} {
        ${0}
    }
snippet     clap_value_enum
alias       clap_enum
abbr        ValueEnum
options     word, indent
    use std::fmt;
    use clap::ValueEnum;

    #[derive(Debug, Clone, ValueEnum)]
    pub enum ${1} {
        ${0}
    }
    impl fmt::Display for $1 {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result { }
    }
snippet     clap_sub
alias       clap_subcommand
abbr        clap SubCommand
options     word, indent
    use clap::{Args, Parser, Subcommand};

    #[derive(Debug, Parser)]
    pub struct ${1} {
        #[command(subcommand)]
        pub command: $2,
    }

    #[derive(Debug, Subcommand)]
    pub enum ${2} {
        #[command(about = "${0}")]
        ${3}($4),
    }

    #[derive(Debug, Args)]
    pub struct ${4} {}
snippet     use_anyhow
abbr        use anyhow::{bail, ensure, Result, Context};
options     word, indent
    use anyhow::{bail, ensure, Result, Context};${0}
snippet     askama_template
alias       askama
abbr        #[derive(Template)] #[template(path = "hello.html")]pub struct HelloTemplate<'a> { }
options     word, indent
    #[derive(Template)]
    #[template(path = "${1}")]
    pub struct ${2}Template<'a> {
        ${0}
    }
snippet     str
abbr        String::new()
options     word, indent
    String::new()${0}








